{"version":3,"sources":["components/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["Sider","Layout","Content","LayoutOfApp","props","children","history","useHistory","className","theme","mode","defaultSelectedKeys","Item","key","icon","VideoCameraOutlined","onClick","push","UserOutlined","TeacherList","React","lazy","StudentList","StudentsOfTeacher","App","Suspense","fallback","exact","path","name","render","from","to","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TASQA,EAAmBC,IAAnBD,MAAOE,EAAYD,IAAZC,QA4BAC,MA1Bf,WAAmCC,GAAQ,IAApBC,EAAmB,EAAnBA,SACfC,EAAUC,cAGhB,OACE,kBAAC,IAAD,KACE,kBAACP,EAAD,CAAOQ,UAAU,SACf,iDACA,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,iBACrD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,eAAeC,KAAM,kBAACC,EAAA,EAAD,MAAyBC,QAAS,WAAQV,EAAQW,KAAK,kBAA3F,gBAGA,kBAAC,IAAKL,KAAN,CAAWC,IAAI,eAAeC,KAAM,kBAACI,EAAA,EAAD,MAAkBF,QAAS,WAAQV,EAAQW,KAAK,kBAApF,kBAKJ,kBAAC,IAAD,CAAQT,UAAU,eAChB,kBAACN,EAAD,CAASM,UAAU,WACjB,yBAAKA,UAAU,eAAeH,OCzBlCc,EAAcC,IAAMC,MAAK,kBAAM,8DAC/BC,EAAcF,IAAMC,MAAK,kBAAM,8DAC/BE,EAAoBH,IAAMC,MAAK,kBAAM,uDAoB5BG,MAnBf,WACE,OAEO,kBAAC,IAAD,KACM,kBAAC,EAAD,KACD,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,6CAE5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,2BAA2BC,KAAK,wBAAwBC,OAAQ,SAAA1B,GAAK,OAAI,kBAACmB,EAAsBnB,MAClH,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,eAAeC,KAAK,eAAeC,OAAQ,SAAA1B,GAAK,OAAI,kBAACe,EAAgBf,MACvF,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,eAAeC,KAAK,eAAeC,OAAQ,SAAA1B,GAAK,OAAI,kBAACkB,EAAgBlB,MACvF,kBAAC,IAAD,CAAU2B,KAAK,IAAIC,GAAG,sBCPhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4da71777.chunk.js","sourcesContent":["import React from 'react'\r\nimport 'antd/dist/antd.css';\r\nimport '../../Assets/Layout.css'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n  UserOutlined,\r\n  VideoCameraOutlined,\r\n} from '@ant-design/icons';\r\nconst { Sider, Content } = Layout;\r\n\r\nfunction LayoutOfApp({ children }, props) {\r\n  const history = useHistory();\r\n  // var pathname = window.location.pathname;\r\n  //const { path, params } = props.match;\r\n  return (\r\n    <Layout>\r\n      <Sider className=\"sider\">\r\n        <h1>Student-Schedular</h1>\r\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"/teacherlist\"]}>\r\n          <Menu.Item key=\"/teacherlist\" icon={<VideoCameraOutlined />} onClick={() => { history.push('/teacherlist') }}>\r\n            Teacher List\r\n            </Menu.Item>\r\n          <Menu.Item key=\"/studentlist\" icon={<UserOutlined />} onClick={() => { history.push('/studentlist') }}>\r\n            Student List\r\n            </Menu.Item>\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"childLayout\">\r\n        <Content className=\"content\">\r\n          <div className=\"content-div\">{children}</div>\r\n        </Content>\r\n      </Layout>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default LayoutOfApp\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport './App.css';\r\nimport LayoutOfApp from './components/Layout'\r\n// Pages\r\nconst TeacherList = React.lazy(() => import('./container/TeacherList'));\r\nconst StudentList = React.lazy(() => import('./container/StudentList'));\r\nconst StudentsOfTeacher = React.lazy(() => import('./container/TeacherList/StudentListOfTeacher'))\r\nfunction App() {\r\n  return (\r\n\r\n         <BrowserRouter>\r\n               <LayoutOfApp>\r\n              <React.Suspense fallback={<div>Loading... </div>}>\r\n            \r\n            <Switch>\r\n              <Route exact path=\"/studentlist/teacher/:id\" name=\"StudentOfTeacher Page\" render={props => <StudentsOfTeacher {...props}/>} />\r\n              <Route exact path=\"/teacherlist\" name=\"Teacher Page\" render={props => <TeacherList {...props}/>} />\r\n              <Route exact path=\"/studentlist\" name=\"Student Page\" render={props => <StudentList {...props}/>} />\r\n              <Redirect from=\"/\" to=\"/teacherlist\" />\r\n            </Switch>\r\n          </React.Suspense>\r\n          </LayoutOfApp>\r\n        </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}