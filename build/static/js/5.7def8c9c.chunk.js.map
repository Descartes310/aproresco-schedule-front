{"version":3,"sources":["services/Student/index.js","../node_modules/antd/es/row/index.js","components/StudentList/SearchFilter.js","container/StudentList/index.js"],"names":["getStudentListById","TeacherId","axios","get","process","then","res","console","log","data","getStudentList","page","size","getStudentListByFirstName","name","getStudentListByLastName","Row","Option","Select","SearchFilter","changeInput","defultType","searchList","layout","Item","defaultValue","onChange","val","target","value","type","placeholder","onClick","columns","title","render","record","firstName","lastName","key","fixed","dataIndex","indexGrade","min","teacher","grades","map","iteam","gradeindex","Math","sqrt","pow","grade","isSubjectContains","subjects","includes","subject","text","className","join","placement","color","style","studentCount","StudentList","useState","studentList","setStudentList","totalCount","pageIndex","pageSize","tableProps","setTableProps","searchValue","searchType","search","setSearch","useEffect","getListView","_embedded","students","totalElements","ghost","extra","e","dataSource","pagination","filters","sorter","current","total","showTotal","range"],"mappings":"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","file":"static/js/5.7def8c9c.chunk.js","sourcesContent":["import axios from 'axios'\r\nexport const getStudentListById = (TeacherId) =>{\r\n    return axios.get(`${process.env.REACT_APP_BASE_API_URL}/students/search/findByTeacherId?id=${TeacherId}`)\r\n        .then(res =>{\r\n            console.log(res.data);\r\n            return res.data;\r\n        })\r\n}\r\n\r\nexport const getStudentList = (page,size) =>{\r\n    return axios.get(`${process.env.REACT_APP_BASE_API_URL}/students?page=${page}&size=${size}`)\r\n        .then(res =>{\r\n            return res.data;\r\n        })\r\n}\r\n\r\nexport const getStudentListByFirstName = (name) =>{\r\n    return axios.get(`${process.env.REACT_APP_BASE_API_URL}/students/search/findByFirstName?name=${name}`)\r\n        .then(res =>{\r\n            return res.data;\r\n        })\r\n}\r\n\r\nexport const getStudentListByLastName = (name) =>{\r\n    return axios.get(`${process.env.REACT_APP_BASE_API_URL}/students/search/findByLastName?name=${name}`)\r\n        .then(res =>{\r\n            return res.data;\r\n        })\r\n}","import { Row } from '../grid';\nexport default Row;","import React from 'react'\r\nimport { Form, Select, Input, Button } from 'antd'\r\n\r\nconst { Option } = Select;\r\nconst SearchFilter = ({changeInput,defultType,searchList}) => {\r\n\r\n    return (\r\n        <Form layout=\"inline\">\r\n            <Form.Item>\r\n                <Select\r\n                    defaultValue={defultType}\r\n                    onChange={(val) =>\r\n\t\t\t\t\t\tchangeInput({ target: { name: 'searchType', value: val } })\r\n\t\t\t\t\t}\r\n                >\r\n                    <Option value=\"firstName\">First Name</Option>\r\n                    <Option value=\"lastName\">Last Name</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Name\"\r\n                    name=\"searchValue\"\r\n                    onChange={changeInput}\r\n                />\r\n            </Form.Item>\r\n            <Button onClick={searchList}> Search </Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SearchFilter\r\n","import React, { useEffect, useState } from 'react'\r\nimport 'antd/dist/antd.css';\r\nimport { Table, PageHeader, Button, Spin, Tooltip, Row, Col } from 'antd';\r\nimport { getStudentList, getStudentListByFirstName, getStudentListByLastName, } from '../../services/Student'\r\nimport SearchFilter from '../../components/StudentList/SearchFilter'\r\nimport '../../Assets/container/StudentList.css'\r\nconst columns = [\r\n    {\r\n        title: 'Name',\r\n        render: (record) => (\r\n            <div>\r\n                {record.firstName + \" \" + record.lastName}\r\n            </div>\r\n        ),\r\n        key: 'name',\r\n        fixed: 'left',\r\n    },\r\n    {\r\n        title: 'Period',\r\n        dataIndex: 'period',\r\n        key: 'period',\r\n    },\r\n    {\r\n        title: 'Subject',\r\n        dataIndex: 'subject',\r\n        key: 'subject',\r\n    }\r\n    ,\r\n    {\r\n        title: 'Grades',\r\n        render: (record) => {\r\n            const indexGrade = () => {\r\n                var min = record.teacher.grades[0];\r\n                record.teacher.grades.map(iteam => {\r\n                    const gradeindex = Math.sqrt(Math.pow(iteam - record.grade, 2))\r\n                    if (gradeindex < min) {\r\n                        min = gradeindex;\r\n                    }\r\n                    return null;\r\n                })\r\n                return min;\r\n            }\r\n            return (\r\n                <span>{indexGrade() > 0 ? `${record.grade} (${indexGrade()})` : record.grade}</span>\r\n            )\r\n        },\r\n        key: 'grade',\r\n    }\r\n    ,\r\n    {\r\n        title: 'Teacher Name',\r\n        render: (record) => {\r\n            var isSubjectContains = record.teacher.subjects.includes(record.subject)\r\n            const text = <div className=\"grade-coloumn-tooltip\">\r\n                <h4>Details :</h4>\r\n                <Row>Subjects : {record.teacher.subjects.join(', ')}</Row>\r\n                <Row>Grades : {record.teacher.grades.join(', ')}</Row>\r\n            </div>\r\n            return (\r\n                <Tooltip placement=\"topLeft\" title={text} color={\"white\"}>\r\n                    <div style={{ color: !isSubjectContains ? 'orange' : '' }}>\r\n                        {record.teacher.firstName + \" \" + record.teacher.lastName + \" (\" + record.teacher.studentCount + \")\"}\r\n                    </div>\r\n                </Tooltip>\r\n            )\r\n        },\r\n        key: 'studentCount',\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'operation',\r\n        fixed: 'right',\r\n        render: (record) => <Button>Edit</Button>,\r\n    },\r\n];\r\nfunction StudentList() {\r\n    const [studentList, setStudentList] = useState();\r\n    const [tableProps, setTableProps] = useState({\r\n        totalCount: 0,\r\n        pageIndex: 0,\r\n        pageSize: 30,\r\n    });\r\n    const [search, setSearch] = useState({\r\n        searchValue: \"\",\r\n        searchType: \"firstName\",\r\n    })\r\n    useEffect(() => {\r\n        getListView();\r\n    }, [tableProps.pageIndex]);\r\n\r\n    const getListView = () => {\r\n        if (search.searchValue === \"\") {\r\n            getStudentList(tableProps.pageIndex, tableProps.pageSize).then(data => {\r\n                setStudentList(data._embedded.students)\r\n                setTableProps({\r\n                    ...tableProps,\r\n                    totalCount: data.page.totalElements,\r\n                });\r\n            })\r\n        }\r\n        else {\r\n            if (search.searchType === \"firstName\") {\r\n                getStudentListByFirstName(search.searchValue).then(data => {\r\n                    setStudentList(data._embedded.students)\r\n                    setTableProps({\r\n                        totalCount: 0,\r\n                        pageIndex: 0,\r\n                        pageSize: 30,\r\n                    });\r\n                })\r\n            }\r\n            else if (search.searchType === \"lastName\") {\r\n                getStudentListByLastName(search.searchValue).then(data => {\r\n                    setStudentList(data._embedded.students)\r\n                    setTableProps({\r\n                        totalCount: 0,\r\n                        pageIndex: 0,\r\n                        pageSize: 30,\r\n                    });\r\n                })\r\n            }\r\n        }\r\n    }\r\n    const changeSearch = (e) => {\r\n        const { name, value } = e.target;\r\n        setSearch({ ...search, [name]: value });\r\n    };\r\n    const searchList = () => {\r\n        getListView();\r\n    }\r\n    const handleTableChange = (pagination, filters, sorter) => {\r\n        setTableProps({\r\n            ...tableProps,\r\n            pageIndex: pagination.current,\r\n            pageSize: pagination.pageSize,\r\n        });\r\n    };\r\n    return (\r\n        <PageHeader\r\n            ghost={false}\r\n            title=\"Student List View\"\r\n            extra={[\r\n                <Button key=\"1\" type=\"primary\">Genrate Calender</Button>,\r\n                <Button key=\"2\" type=\"primary\">Launch Schedule</Button>\r\n            ]}\r\n        >\r\n            <SearchFilter\r\n                changeInput={changeSearch}\r\n                searchList={searchList}\r\n                defultType={search.searchType}\r\n            />\r\n            {!studentList ? <Spin className=\"loading-table\" /> :\r\n                <Table\r\n                    className=\"table-padding\"\r\n                    columns={columns}\r\n                    dataSource={studentList}\r\n                    onChange={handleTableChange}\r\n                    pagination={{\r\n                        total: tableProps.totalCount,\r\n                        pageSize: tableProps.pageSize,\r\n                        showTotal: (total, range) => `${range[0]}-${range[1]} out of ${total}`,\r\n                    }}\r\n                />}\r\n\r\n        </PageHeader>\r\n    )\r\n}\r\nexport default StudentList\r\n"],"sourceRoot":""}