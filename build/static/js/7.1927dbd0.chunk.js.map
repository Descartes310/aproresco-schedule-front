{"version":3,"sources":["services/Student/index.js","Action-Reducer/Student/action.js","../node_modules/antd/es/row/index.js","components/StudentList/SearchFilter.js","container/StudentList/index.js"],"names":["getStudentListById","TeacherId","axios","get","then","res","console","log","data","catch","err","alert","message","getStudentList","page","size","sortName","sortType","getStudentDetail","studentId","findStudentListByFirstNameAndLastName","firstName","lastName","assignStudentlistToTeacher","teacherId","studentIds","assignStudents","students","dispatch","type","ASSIGN_STUDENT","payload","Row","SearchFilter","Select","Option","changeInput","searchList","layout","Item","label","placeholder","name","onChange","onClick","StudentList","useDispatch","history","useHistory","useState","studentList","setStudentList","sortingName","setSortingName","sortingType","setSortingType","totalCount","pageIndex","pageSize","tableProps","setTableProps","search","setSearch","selectedRow","setSelectedRow","rowSelection","selectedrow","records","recordIdArray","map","record","push","id","columns","title","VerticalAlignBottomOutlined","VerticalAlignTopOutlined","onHeaderCell","column","render","key","fixed","dataIndex","indexGrade","min","teacher","grades","iteam","gradeindex","Math","sqrt","pow","grade","isSubjectContains","subjects","includes","subject","text","className","join","placement","color","style","studentCount","conferenceUrl","e","stopPropagation","window","open","disabled","useEffect","getListView","_embedded","totalElements","ghost","extra","length","target","value","nameData","split","dataSource","pagination","filters","sorter","current","total","showTotal","range","rowKey","onRow"],"mappings":"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","file":"static/js/7.1927dbd0.chunk.js","sourcesContent":["import axios from 'axios'\r\nexport const getStudentListById = (TeacherId) =>{\r\n    return axios.get(`http://tower.watu.fi:8080/students/search/findByTeacherId?id=${TeacherId}`)\r\n        .then(res =>{\r\n            console.log(res.data);\r\n            return res.data;\r\n        })\r\n        .catch(err =>{\r\n            alert(err.message);\r\n        })\r\n}\r\n\r\nexport const getStudentList = (page,size,sortName,sortType) =>{\r\n    return axios.get(`http://tower.watu.fi:8080/students?page=${page}&size=${size}&sort=${sortName}&${sortName}.dir=${sortType}`)\r\n        .then(res =>{\r\n            return res.data;\r\n        })\r\n        .catch(err =>{\r\n            alert(err.message);\r\n        })\r\n}\r\n\r\nexport const getStudentDetail = (studentId) =>{\r\n    return axios.get(`http://tower.watu.fi:8080/students/${studentId}`)\r\n        .then(res =>{\r\n            return res.data;\r\n        })\r\n        .catch(err =>{\r\n            alert(err.message);\r\n        })\r\n}\r\n\r\nexport const findStudentListByFirstNameAndLastName = (firstName,lastName,sortName,sortType) =>{\r\n    return axios.get(`http://tower.watu.fi:8080/students/search/findByFirstNameIgnoreCaseContainingOrLastNameIgnoreCaseContaining?firstName=${firstName}&lastName=${lastName}&sort=${sortName},${sortType}`)\r\n        .then(res =>{\r\n            return res.data;\r\n        })\r\n        .catch(err =>{\r\n            alert(err.message);\r\n        })\r\n}\r\n\r\nexport const assignStudentlistToTeacher = (teacherId,studentIds) =>{\r\n    return axios.get(`http://tower.watu.fi:8080/plan/${teacherId}/${studentIds}`)\r\n        .then(res =>{\r\n            return res.data;\r\n        })\r\n        .catch(err =>{\r\n            alert(err.message);\r\n        })\r\n}","import {ASSIGN_STUDENT} from '../actionType'\r\n\r\nexport const assignStudents = (students) => {\r\n    return (dispatch) => {\r\n      dispatch({ type: ASSIGN_STUDENT, payload: students });\r\n    };\r\n  };","import { Row } from '../grid';\nexport default Row;","import React from 'react'\r\nimport { Form, Select, Input, Button } from 'antd'\r\n\r\nconst { Option } = Select;\r\nconst SearchFilter = ({changeInput,searchList}) => {\r\n\r\n    return (\r\n        <Form layout=\"inline\">\r\n            <Form.Item label=\"Name\">\r\n                <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Name\"\r\n                    name=\"name\"\r\n                    onChange={changeInput}\r\n                />\r\n            </Form.Item>\r\n            <Button onClick={searchList}> Search </Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SearchFilter\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Table, PageHeader, Button, Spin, Tooltip, Row, Col } from 'antd';\r\nimport { useDispatch } from 'react-redux'\r\nimport 'antd/dist/antd.css';\r\nimport '../../Assets/container/StudentList.css'\r\nimport { getStudentList, findStudentListByFirstNameAndLastName, } from '../../services/Student'\r\nimport SearchFilter from '../../components/StudentList/SearchFilter'\r\nimport { assignStudents } from '../../Action-Reducer/Student/action'\r\n\r\n//icon\r\n\r\nimport { VerticalAlignBottomOutlined, VerticalAlignTopOutlined } from \"@ant-design/icons\"\r\n\r\n\r\nfunction StudentList() {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [studentList, setStudentList] = useState();\r\n    const [sortingName, setSortingName] = useState(\"\");\r\n    const [sortingType, setSortingType] = useState(\"\");\r\n    const [tableProps, setTableProps] = useState({\r\n        totalCount: 0,\r\n        pageIndex: 0,\r\n        pageSize: 30,\r\n    });\r\n    const [search, setSearch] = useState({\r\n        name: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n    })\r\n    const [selectedRow, setSelectedRow] = useState([]);\r\n    const rowSelection = {\r\n        selectedRow,\r\n        onChange: (selectedrow, records) => {\r\n            console.log('selectedRowKeys changed: ', records);\r\n            var recordIdArray = [];\r\n            records.map(record => {\r\n                recordIdArray.push({ id: record.id, firstName: record.firstName, lastName: record.lastName })\r\n            })\r\n            setSelectedRow(recordIdArray);\r\n            console.log(selectedRow);\r\n        }\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: <div><span>Name </span>\r\n                {sortingName === \"firstName\" && sortingType === \"asc\" && <VerticalAlignBottomOutlined />}\r\n                {sortingName === \"firstName\" && sortingType === \"desc\" && <VerticalAlignTopOutlined />}\r\n                {sortingName === \"firstName\" && sortingType === \"\" && \"\"}\r\n            </div>,\r\n            onHeaderCell: (column) => {\r\n                return {\r\n                    onClick: () => {\r\n                        setSortingName(\"firstName\");\r\n                        if (sortingType == \"\") { setSortingType(\"asc\") }\r\n                        else if (sortingType == \"asc\") { setSortingType(\"desc\") }\r\n                        else if (sortingType == \"desc\") { setSortingType(\"\"); setSortingName(\"\"); }\r\n                    }\r\n                };\r\n            },\r\n            render: (record) => (\r\n                <div>\r\n                    {record.firstName + \" \" + record.lastName}\r\n                </div>\r\n            ),\r\n            key: 'name',\r\n            fixed: 'left',\r\n        },\r\n        {\r\n            title: 'Period',\r\n            dataIndex: 'period',\r\n            key: 'period',\r\n        },\r\n        {\r\n            title: <div><span>Subject </span>\r\n                {sortingName === \"subject\" && sortingType === \"asc\" && <VerticalAlignBottomOutlined />}\r\n                {sortingName === \"subject\" && sortingType === \"desc\" && <VerticalAlignTopOutlined />}\r\n                {sortingName === \"subject\" && sortingType === \"\" && \"\"}\r\n            </div>,\r\n            onHeaderCell: (column) => {\r\n                return {\r\n                    onClick: () => {\r\n                        setSortingName(\"subject\");\r\n                        if (sortingType == \"\") { setSortingType(\"asc\") }\r\n                        else if (sortingType == \"asc\") { setSortingType(\"desc\") }\r\n                        else if (sortingType == \"desc\") { setSortingType(\"\"); setSortingName(\"\"); }\r\n                    }\r\n                };\r\n            },\r\n            dataIndex: 'subject',\r\n            key: 'subject',\r\n        }\r\n        ,\r\n        {\r\n            title: <div><span>Grade </span>\r\n                {sortingName === \"grade\" && sortingType === \"asc\" && <VerticalAlignBottomOutlined />}\r\n                {sortingName === \"grade\" && sortingType === \"desc\" && <VerticalAlignTopOutlined />}\r\n                {sortingName === \"grade\" && sortingType === \"\" && \"\"}\r\n            </div>,\r\n            onHeaderCell: (column) => {\r\n                return {\r\n                    onClick: () => {\r\n                        setSortingName(\"grade\");\r\n                        if (sortingType == \"\") { setSortingType(\"asc\") }\r\n                        else if (sortingType == \"asc\") { setSortingType(\"desc\") }\r\n                        else if (sortingType == \"desc\") { setSortingType(\"\"); setSortingName(\"\"); }\r\n                    }\r\n                };\r\n            },\r\n            render: (record) => {\r\n                const indexGrade = () => {\r\n                    var min = record.teacher.grades[0];\r\n                    record.teacher.grades.map(iteam => {\r\n                        const gradeindex = Math.sqrt(Math.pow(iteam - record.grade, 2))\r\n                        if (gradeindex < min) {\r\n                            min = gradeindex;\r\n                        }\r\n                        return null;\r\n                    })\r\n                    return min;\r\n                }\r\n                return (\r\n                    <span>{indexGrade() > 0 ? `${record.grade} (${indexGrade()})` : record.grade}</span>\r\n                )\r\n            },\r\n            key: 'grade',\r\n        }\r\n        ,\r\n        {\r\n            title: 'Teacher Name',\r\n            render: (record) => {\r\n                var isSubjectContains = record.teacher.subjects.includes(record.subject)\r\n                const text = <div className=\"grade-coloumn-tooltip\">\r\n                    <h4>Details :</h4>\r\n                    <Row>Subjects : {record.teacher.subjects.join(', ')}</Row>\r\n                    <Row>Grades : {record.teacher.grades.join(', ')}</Row>\r\n                </div>\r\n                return (\r\n                    <Tooltip placement=\"topLeft\" title={text} color={\"white\"}>\r\n                        <div style={{ color: !isSubjectContains ? 'orange' : '' }}>\r\n                            {record.teacher.firstName + \" \" + record.teacher.lastName + \" (\" + record.teacher.studentCount + \")\"}\r\n                        </div>\r\n                    </Tooltip>\r\n                )\r\n            },\r\n            key: 'studentCount',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'operation',\r\n            fixed: 'right',\r\n            render: (record) => <Tooltip title={!record.teacher.conferenceUrl ? record.teacher.conferenceUrl : \"Link Is Not Found\"}>\r\n                <Button onClick={(e)=>{\r\n                    e.stopPropagation();\r\n                    window.open(record.teacher.conferenceUrl)\r\n                    }} \r\n                disabled={record.teacher.conferenceUrl}>Google Meet</Button>\r\n            </Tooltip>,\r\n        },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        getListView();\r\n    }, [tableProps.pageIndex]);\r\n    useEffect(() => {\r\n        getListView();\r\n    }, [sortingType, sortingName]);\r\n    const getListView = () => {\r\n        console.log(sortingType);\r\n        setStudentList(\"\");\r\n        if (search.firstName === \"\" && search.lastName === \"\") {\r\n            getStudentList(tableProps.pageIndex, tableProps.pageSize, sortingName, sortingType).then(data => {\r\n                setStudentList(data._embedded.students)\r\n                setTableProps({\r\n                    ...tableProps,\r\n                    totalCount: data.page.totalElements,\r\n                });\r\n            })\r\n        }\r\n        else {\r\n            findStudentListByFirstNameAndLastName(search.firstName, search.lastName,sortingName,sortingType).then(data => {\r\n                setStudentList(data._embedded.students)\r\n                setTableProps({\r\n                    totalCount: 1,\r\n                    pageIndex: 0,\r\n                    pageSize: 30,\r\n                });\r\n            })\r\n        }\r\n    }\r\n    const changeSearch = (e) => {\r\n        const { name, value } = e.target;\r\n        setSearch({ ...search, [name]: value });\r\n        if (e.target.name === \"name\") {\r\n            var nameData = value.split(\" \");\r\n            if (nameData.length > 1) {\r\n                setSearch({ ...search, firstName: nameData[0], lastName: nameData[1] });\r\n            }\r\n            else {\r\n                setSearch({ ...search, firstName: nameData[0], lastName: nameData[0] });\r\n            }\r\n        }\r\n    };\r\n    const searchList = () => {\r\n        getListView();\r\n    }\r\n    const handleTableChange = (pagination, filters, sorter) => {\r\n        setTableProps({\r\n            ...tableProps,\r\n            pageIndex: pagination.current,\r\n            pageSize: pagination.pageSize,\r\n        });\r\n    };\r\n    return (\r\n        <PageHeader\r\n            ghost={false}\r\n            title=\"Student List View\"\r\n            extra={[\r\n                <Button key=\"1\" type=\"primary\">Genrate Calender</Button>,\r\n                <Button key=\"2\" type=\"primary\">Launch Schedule</Button>,\r\n                <Button key='3' type=\"primary\"\r\n                    disabled={selectedRow.length > 0 ? false : true}\r\n                    onClick={() => {\r\n                        dispatch(assignStudents(selectedRow))\r\n                        history.push('/teacherlist');\r\n                    }}\r\n                >\r\n                    ASSIGN STUDENT\r\n                </Button>\r\n            ]}\r\n        >\r\n            <SearchFilter\r\n                changeInput={changeSearch}\r\n                searchList={searchList}\r\n            />\r\n            {!studentList ? <Spin className=\"loading-table\" /> :\r\n                <Table\r\n                    className=\"table-padding\"\r\n                    columns={columns}\r\n                    dataSource={studentList}\r\n                    onChange={handleTableChange}\r\n                    pagination={{\r\n                        total: tableProps.totalCount,\r\n                        pageSize: tableProps.pageSize,\r\n                        showTotal: (total, range) => `${range[0]}-${range[1]} out of ${total}`,\r\n                    }}\r\n                    rowSelection={rowSelection}\r\n                    rowKey=\"id\"\r\n                    onRow={(record) => ({\r\n                        onClick: () => (history.push(`/studentlist/studentDetail/${record.id}`))\r\n                    })}\r\n                />}\r\n\r\n        </PageHeader>\r\n    )\r\n}\r\nexport default StudentList\r\n"],"sourceRoot":""}